using System;
using System.Collections.Generic;
using UnityEngine;
using System.Text.RegularExpressions;
using System.Linq;

namespace MathGameAI
{
    [System.Serializable]
    public class MathProblem
    {
        public string question;
        public int correctAnswer;
        public string solution;
        public DifficultyLevel difficulty;
        public ProblemTopic topic;
        public float generationTime;
        
        public MathProblem()
        {
            generationTime = Time.time;
        }
    }

    [System.Serializable]
    public class TopicMastery
    {
        public string topicName;
        public int masteryLevel;
        
        public TopicMastery(string name, int level = 0)
        {
            topicName = name;
            masteryLevel = level;
        }
    }

    [System.Serializable]
    public class PlayerProgress
    {
        public int totalProblemsAttempted;
        public int correctAnswers;
        public int mathKnowledgeLevel;
        public int accuracyPercentage;
        public List<TopicMastery> topicMasteries;
        
        public PlayerProgress()
        {
            topicMasteries = new List<TopicMastery>();
        }
        
        public void UpdateTopicMastery(ProblemTopic topic, bool isCorrect)
        {
            string topicName = topic.ToString();
            var existing = topicMasteries.FirstOrDefault(t => t.topicName == topicName);
            
            if (existing == null)
            {
                existing = new TopicMastery(topicName);
                topicMasteries.Add(existing);
            }
            
            if (isCorrect)
            {
                existing.masteryLevel = Mathf.Min(100, existing.masteryLevel + 5);
            }
        }
        
        public int GetTopicMastery(ProblemTopic topic)
        {
            var mastery = topicMasteries.FirstOrDefault(t => t.topicName == topic.ToString());
            return mastery?.masteryLevel ?? 0;
        }
    }

    public enum DifficultyLevel
    {
        Grade7 = 1,
        Grade8 = 2,
        Grade9 = 3
    }

    public enum ProblemTopic
    {
        IntegerOperations,
        BasicVariables,
        LinearEquations,
        AdvancedEquations
    }

    public class MathAI : MonoBehaviour
    {
        [Header("AI Configuration")]
        [SerializeField] private bool enableDebugMode = false;
        [SerializeField] private int maxGenerationAttempts = 5;
        
        [Header("Player Progress")]
        [SerializeField] private PlayerProgress playerProgress;
        
        // Events for game integration
        public System.Action<MathProblem> OnProblemGenerated;
        public System.Action<bool, int> OnAnswerSubmitted; // isCorrect, newKnowledgeLevel
        public System.Action<PlayerProgress> OnProgressUpdated;
        
        // AI State
        private bool isInitialized = false;
        private System.Random aiRandom;
        private float lastProblemTime;
        
        // Problem validation
        private readonly string[] forbiddenKeywords = 
        {
            "เศษส่วน", "ทศนิยม", "เรขาคณิต", "ความน่าจะเป็น", 
            "ตรีโกณมิติ", "ลอการิทึม", "อนุพันธ์", "อินทิกรัล",
            "เวกเตอร์", "เมทริกซ์", "รากที่สอง", "กำลังสอง"
        };
        
        // Problem generation weights (for dynamic difficulty)
        private Dictionary<ProblemTopic, float> topicWeights;
        
        #region Unity Lifecycle
        
        void Awake()
        {
            InitializeAI();
        }
        
        void Start()
        {
            if (!isInitialized)
            {
                InitializeAI();
            }
        }
        
        #endregion
        
        #region AI Initialization
        
        private void InitializeAI()
        {
            if (isInitialized) return;
            
            // Initialize random with time-based seed for true randomness
            aiRandom = new System.Random(DateTime.Now.Millisecond + UnityEngine.Random.Range(0, 1000));
            
            // Initialize player progress
            if (playerProgress == null)
            {
                playerProgress = new PlayerProgress();
            }
            
            // Initialize topic weights
            topicWeights = new Dictionary<ProblemTopic, float>
            {
                { ProblemTopic.IntegerOperations, 1.0f },
                { ProblemTopic.BasicVariables, 1.0f },
                { ProblemTopic.LinearEquations, 1.0f },
                { ProblemTopic.AdvancedEquations, 1.0f }
            };
            
            isInitialized = true;
            
            if (enableDebugMode)
            {
                Debug.Log("[Math AI] ระบบ AI เริ่มต้นเสร็จสิ้น");
            }
        }
        
        #endregion
        
        #region Public API - Main Functions
        
        /// <summary>
        /// สร้างโจทย์คณิตศาสตร์ตามระดับความยาก
        /// </summary>
        /// <param name="targetDifficulty">ระดับความยากที่ต้องการ (ถ้าไม่ระบุจะสุ่มตามความสามารถผู้เล่น)</param>
        /// <returns>โจทย์คณิตศาสตร์ที่สร้างขึ้น</returns>
        public MathProblem GenerateProblem(DifficultyLevel? targetDifficulty = null)
        {
            if (!isInitialized)
            {
                InitializeAI();
            }
            
            MathProblem problem = null;
            int attempts = 0;
            
            // Prevent infinite recursion
            while (problem == null && attempts < maxGenerationAttempts)
            {
                attempts++;
                
                DifficultyLevel difficulty = targetDifficulty ?? CalculateOptimalDifficulty();
                problem = CreateProblem(difficulty);
                
                // Validate problem
                if (!IsValidProblem(problem))
                {
                    if (enableDebugMode)
                    {
                        Debug.Log($"[Math AI] โจทย์ไม่ผ่านการตรวจสอบ ครั้งที่ {attempts}: {problem?.question}");
                    }
                    
                    // Auto-solve invalid problem and discard
                    SolveAndDiscardInvalidProblem(problem);
                    problem = null;
                }
            }
            
            // Fallback: create simple valid problem if all attempts failed
            if (problem == null)
            {
                problem = CreateFallbackProblem();
                if (enableDebugMode)
                {
                    Debug.LogWarning("[Math AI] ใช้โจทย์สำรองเนื่องจากการสร้างล้มเหลว");
                }
            }
            
            lastProblemTime = Time.time;
            OnProblemGenerated?.Invoke(problem);
            
            return problem;
        }
        
        /// <summary>
        /// รับคำตอบจากผู้เล่นและประเมินผล
        /// </summary>
        public bool SubmitAnswer(int playerAnswer, MathProblem problem)
        {
            bool isCorrect = (playerAnswer == problem.correctAnswer);
            
            // Update progress
            playerProgress.totalProblemsAttempted++;
            
            if (isCorrect)
            {
                playerProgress.correctAnswers++;
            }
            
            // Update topic mastery
            playerProgress.UpdateTopicMastery(problem.topic, isCorrect);
            
            // Recalculate overall progress
            UpdateOverallProgress();
            
            // Adjust difficulty weights based on performance
            AdjustDifficultyWeights(problem.topic, isCorrect);
            
            // Fire events
            OnAnswerSubmitted?.Invoke(isCorrect, playerProgress.mathKnowledgeLevel);
            OnProgressUpdated?.Invoke(playerProgress);
            
            return isCorrect;
        }
        
        /// <summary>
        /// ปรับระดับความยากตามของหายากในเกม
        /// </summary>
        /// <param name="rarityLevel">ระดับความหายาก (1-10)</param>
        public DifficultyLevel CalculateDifficultyByRarity(int rarityLevel)
        {
            // Map rarity to difficulty with AI learning consideration
            float baseMapping = Mathf.Clamp01((rarityLevel - 1) / 9f); // 0-1 range
            float playerSkill = playerProgress.mathKnowledgeLevel / 100f; // 0-1 range
            
            // AI adjusts difficulty based on player skill
            float adjustedDifficulty = baseMapping * 0.7f + playerSkill * 0.3f;
            
            if (adjustedDifficulty < 0.33f)
                return DifficultyLevel.Grade7;
            else if (adjustedDifficulty < 0.67f)
                return DifficultyLevel.Grade8;
            else
                return DifficultyLevel.Grade9;
        }
        
        #endregion
        
        #region Problem Generation Core
        
        private DifficultyLevel CalculateOptimalDifficulty()
        {
            // AI determines optimal difficulty based on player performance
            int knowledge = playerProgress.mathKnowledgeLevel;
            int accuracy = playerProgress.accuracyPercentage;
            
            // Adaptive difficulty algorithm
            float difficultyScore = (knowledge * 0.6f + accuracy * 0.4f) / 100f;
            
            if (difficultyScore < 0.4f)
                return DifficultyLevel.Grade7;
            else if (difficultyScore < 0.75f)
                return DifficultyLevel.Grade8;
            else
                return DifficultyLevel.Grade9;
        }
        
        private MathProblem CreateProblem(DifficultyLevel difficulty)
        {
            switch (difficulty)
            {
                case DifficultyLevel.Grade7:
                    return GenerateGrade7Problem();
                case DifficultyLevel.Grade8:
                    return GenerateGrade8Problem();
                case DifficultyLevel.Grade9:
                    return GenerateGrade9Problem();
                default:
                    return GenerateGrade7Problem();
            }
        }
        
        private MathProblem GenerateGrade7Problem()
        {
            var problem = new MathProblem
            {
                difficulty = DifficultyLevel.Grade7,
                topic = ProblemTopic.IntegerOperations
            };
            
            int problemType = aiRandom.Next(1, 5);
            
            switch (problemType)
            {
                case 1: // บวกลบจำนวนเต็ม
                    {
                        int a = aiRandom.Next(-20, 21);
                        int b = aiRandom.Next(-20, 21);
                        problem.question = $"จงหาค่าของ {a} + ({b})";
                        problem.correctAnswer = a + b;
                        problem.solution = $"{a} + ({b}) = {problem.correctAnswer}";
                        break;
                    }
                
                case 2: // คูณหารจำนวนเต็ม
                    {
                        int a = aiRandom.Next(-10, 11);
                        int b = aiRandom.Next(2, 11);
                        if (a == 0) a = 1;
                        problem.question = $"จงหาค่าของ {a} × {b}";
                        problem.correctAnswer = a * b;
                        problem.solution = $"{a} × {b} = {problem.correctAnswer}";
                        break;
                    }
                
                case 3: // ค่าของตัวแปร
                    {
                        int x = aiRandom.Next(1, 21);
                        int coefficient = aiRandom.Next(2, 6);
                        problem.question = $"ถ้า x = {x} จงหาค่าของ {coefficient}x";
                        problem.correctAnswer = coefficient * x;
                        problem.solution = $"แทนค่า x = {x} ได้ {coefficient} × {x} = {problem.correctAnswer}";
                        problem.topic = ProblemTopic.BasicVariables;
                        break;
                    }
                
                case 4: // สมการง่าย
                    {
                        int answer = aiRandom.Next(1, 16);
                        int constant = aiRandom.Next(1, 21);
                        problem.question = $"จงหาค่า x ในสมการ x + {constant} = {answer + constant}";
                        problem.correctAnswer = answer;
                        problem.solution = $"x + {constant} = {answer + constant}\nx = {answer + constant} - {constant} = {answer}";
                        problem.topic = ProblemTopic.LinearEquations;
                        break;
                    }
            }
            
            return problem;
        }
        
        private MathProblem GenerateGrade8Problem()
        {
            var problem = new MathProblem
            {
                difficulty = DifficultyLevel.Grade8,
                topic = ProblemTopic.LinearEquations
            };
            
            int problemType = aiRandom.Next(1, 4);
            
            switch (problemType)
            {
                case 1: // ax + b = c
                    {
                        int a = aiRandom.Next(2, 8);
                        int x = aiRandom.Next(1, 11);
                        int b = aiRandom.Next(-15, 16);
                        int c = a * x + b;
                        problem.question = $"จงหาค่า x ในสมการ {a}x + ({b}) = {c}";
                        problem.correctAnswer = x;
                        problem.solution = $"{a}x + ({b}) = {c}\n{a}x = {c - b}\nx = {(c - b)}/{a} = {x}";
                        break;
                    }
                
                case 2: // ax - b = c
                    {
                        int a = aiRandom.Next(3, 7);
                        int x = aiRandom.Next(2, 12);
                        int b = aiRandom.Next(1, 21);
                        int c = a * x - b;
                        problem.question = $"จงหาค่า x ในสมการ {a}x - {b} = {c}";
                        problem.correctAnswer = x;
                        problem.solution = $"{a}x - {b} = {c}\n{a}x = {c + b}\nx = {(c + b)}/{a} = {x}";
                        break;
                    }
                
                case 3: // Word problem
                    {
                        int total = aiRandom.Next(80, 101);
                        int first = aiRandom.Next(40, total - 20);
                        int second = total - first;
                        problem.question = $"คะแนนรวม 2 วิชาได้ {total} คะแนน ถ้าวิชาแรกได้ {first} คะแนน จงหาคะแนนวิชาที่สอง (ให้ x แทนคะแนนวิชาที่สอง)";
                        problem.correctAnswer = second;
                        problem.solution = $"ให้ x = คะแนนวิชาที่สอง\n{first} + x = {total}\nx = {total} - {first} = {second}";
                        break;
                    }
            }
            
            return problem;
        }
        
        private MathProblem GenerateGrade9Problem()
        {
            var problem = new MathProblem
            {
                difficulty = DifficultyLevel.Grade9,
                topic = ProblemTopic.AdvancedEquations
            };
            
            int problemType = aiRandom.Next(1, 4);
            
            switch (problemType)
            {
                case 1: // a(x + b) = c
                    {
                        int a = aiRandom.Next(2, 6);
                        int b = aiRandom.Next(-8, 9);
                        int x = aiRandom.Next(1, 11);
                        int c = a * (x + b);
                        problem.question = $"จงหาค่า x ในสมการ {a}(x + ({b})) = {c}";
                        problem.correctAnswer = x;
                        problem.solution = $"{a}(x + ({b})) = {c}\nx + ({b}) = {c}/{a}\nx = {c/a} - ({b}) = {x}";
                        break;
                    }
                
                case 2: // ax + b = cx + d
                    {
                        int x = aiRandom.Next(2, 10);
                        int a = aiRandom.Next(3, 8);
                        int c = aiRandom.Next(1, a);
                        int b = aiRandom.Next(-15, 16);
                        int d = a * x + b - c * x;
                        problem.question = $"จงหาค่า x ในสมการ {a}x + ({b}) = {c}x + {d}";
                        problem.correctAnswer = x;
                        problem.solution = $"{a}x + ({b}) = {c}x + {d}\n{a - c}x = {d - b}\nx = {(d - b)}/{(a - c)} = {x}";
                        break;
                    }
                
                case 3: // Complex word problem
                    {
                        int total = aiRandom.Next(50, 101);
                        int difference = aiRandom.Next(10, 30);
                        int smaller = (total - difference) / 2;
                        int larger = smaller + difference;
                        problem.question = $"จำนวนสองจำนวนรวมกันได้ {total} จำนวนหนึ่งมากกว่าอีกจำนวนหนึ่ง {difference} หน่วย จงหาจำนวนที่น้อยกว่า (ให้ x แทนจำนวนที่น้อยกว่า)";
                        problem.correctAnswer = smaller;
                        problem.solution = $"ให้ x = จำนวนที่น้อยกว่า\nจำนวนที่มากกว่า = x + {difference}\nx + (x + {difference}) = {total}\n2x = {total - difference}\nx = {smaller}";
                        break;
                    }
            }
            
            return problem;
        }
        
        private MathProblem CreateFallbackProblem()
        {
            return new MathProblem
            {
                question = "จงหาค่าของ 5 + 3",
                correctAnswer = 8,
                solution = "5 + 3 = 8",
                difficulty = DifficultyLevel.Grade7,
                topic = ProblemTopic.IntegerOperations
            };
        }
        
        #endregion
        
        #region Problem Validation & Security
        
        private bool IsValidProblem(MathProblem problem)
        {
            if (problem == null || string.IsNullOrEmpty(problem.question))
                return false;
            
            // Check forbidden keywords
            foreach (string forbidden in forbiddenKeywords)
            {
                if (problem.question.Contains(forbidden))
                {
                    return false;
                }
            }
            
            // Must contain mathematical content
            bool hasValidContent = problem.question.Contains("x") || 
                                  problem.question.Contains("จำนวนเต็ม") || 
                                  problem.question.Contains("สมการ") ||
                                  problem.question.Contains("จงหา") ||
                                  Regex.IsMatch(problem.question, @"-?\d+");
            
            return hasValidContent;
        }
        
        private void SolveAndDiscardInvalidProblem(MathProblem invalidProblem)
        {
            if (invalidProblem == null) return;
            
            if (enableDebugMode)
            {
                Debug.Log($"[AI Auto-Solve] Invalid problem: {invalidProblem.question}");
                Debug.Log($"[AI Auto-Solve] Answer: {invalidProblem.correctAnswer}");
                Debug.Log("[AI Auto-Solve] Problem data discarded and memory cleaned.");
            }
            
            // Clear references and force garbage collection
            invalidProblem = null;
            System.GC.Collect();
        }
        
        #endregion
        
        #region Progress & Learning System
        
        private void UpdateOverallProgress()
        {
            // Calculate accuracy
            if (playerProgress.totalProblemsAttempted > 0)
            {
                playerProgress.accuracyPercentage = 
                    (playerProgress.correctAnswers * 100) / playerProgress.totalProblemsAttempted;
            }
            
            // Calculate overall knowledge level
            float averageMastery = 0f;
            if (playerProgress.topicMasteries.Count > 0)
            {
                averageMastery = playerProgress.topicMasteries.Average(t => t.masteryLevel);
            }
            
            // Combine mastery with accuracy for knowledge level
            float accuracyWeight = Mathf.Clamp01(playerProgress.accuracyPercentage / 100f);
            playerProgress.mathKnowledgeLevel = Mathf.RoundToInt(averageMastery * 0.7f + accuracyWeight * 30f);
            playerProgress.mathKnowledgeLevel = Mathf.Clamp(playerProgress.mathKnowledgeLevel, 0, 100);
        }
        
        private void AdjustDifficultyWeights(ProblemTopic topic, bool wasCorrect)
        {
            // AI learning: adjust topic weights based on performance
            if (topicWeights.ContainsKey(topic))
            {
                if (wasCorrect)
                {
                    // Slightly increase weight for topics player is good at
                    topicWeights[topic] = Mathf.Min(2.0f, topicWeights[topic] + 0.1f);
                }
                else
                {
                    // Increase weight more for topics player struggles with
                    topicWeights[topic] = Mathf.Min(3.0f, topicWeights[topic] + 0.3f);
                }
            }
        }
        
        #endregion
        
        #region Public Getters (for UI integration)
        
        public PlayerProgress GetPlayerProgress() => playerProgress;
        public int GetKnowledgeLevel() => playerProgress.mathKnowledgeLevel;
        public int GetAccuracy() => playerProgress.accuracyPercentage;
        public int GetTotalProblems() => playerProgress.totalProblemsAttempted;
        public bool IsAIReady() => isInitialized;
        
        #endregion
        
        #region Debug & Development
        
        [ContextMenu("Generate Test Problem")]
        public void GenerateTestProblem()
        {
            var problem = GenerateProblem();
            Debug.Log($"Test Problem: {problem.question}");
            Debug.Log($"Answer: {problem.correctAnswer}");
            Debug.Log($"Difficulty: {problem.difficulty}");
        }
        
        [ContextMenu("Reset Progress")]
        public void ResetProgress()
        {
            playerProgress = new PlayerProgress();
            Debug.Log("[Math AI] Player progress reset.");
        }
        
        #endregion
    }
}